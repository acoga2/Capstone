// This sketch is meant to test the UI on the display

#include <EEPROM.h> // For saving current frequency and volume values

// Includes and defines for SSD1306 display
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Custom icon: Team Logo

#define LOGO_WIDTH 128 // In pixels
#define LOGO_HEIGHT 64

const unsigned char TeamLogo[] PROGMEM = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0x80, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFE, 0x0F, 0xFD,
0xBF, 0xA3, 0x87, 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0xFC, 0x63, 0xFD,
0xBF, 0x8F, 0x87, 0xD7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0xF8, 0xF1, 0xFD,
0xBF, 0x9F, 0x87, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFD, 0xF1, 0xF1, 0xFD,
0xBF, 0xBF, 0xA7, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0xF5, 0xF0, 0xFD,
0xBF, 0xFF, 0xA7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xE1, 0xF8, 0xFD,
0xBF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xE9, 0xFA, 0xFD,
0xBF, 0xFF, 0xA7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xE9, 0xF8, 0x7D,
0xBF, 0xFF, 0xA7, 0xFF, 0xE0, 0xFE, 0x07, 0xF1, 0x83, 0xC1, 0xFF, 0xFC, 0x0F, 0xE9, 0xFA, 0x7D,
0xBF, 0xFF, 0xA7, 0xFF, 0x8C, 0x7C, 0xE3, 0xC0, 0x70, 0x38, 0xFF, 0xFC, 0x03, 0xE9, 0xFA, 0x7D,
0xBF, 0xFF, 0xA7, 0xFF, 0x1E, 0x38, 0xE1, 0xE8, 0xF4, 0x7A, 0x7F, 0xFD, 0xC1, 0xE9, 0xFA, 0x7D,
0xBF, 0xFF, 0xA7, 0xFF, 0x3E, 0x1A, 0xE1, 0xE9, 0xF4, 0xFA, 0x7F, 0xFC, 0x11, 0xE9, 0xFA, 0x7D,
0xBF, 0xFF, 0xA7, 0xFE, 0x00, 0x18, 0xE1, 0xE9, 0xF4, 0xFA, 0x7F, 0xFF, 0xC8, 0xE9, 0xFA, 0x7D,
0xBF, 0xFF, 0xA7, 0xFE, 0x3F, 0xFF, 0xE1, 0xE9, 0xF4, 0xFA, 0x7F, 0xFF, 0xF4, 0xE9, 0xFA, 0x7D,
0xBF, 0xFF, 0xA7, 0xFE, 0x3F, 0xFF, 0x89, 0xE9, 0xF4, 0xFA, 0x7F, 0xFF, 0xF8, 0xE9, 0xF8, 0xFD,
0xBF, 0xFF, 0xA7, 0xFE, 0x3F, 0xFE, 0x21, 0xE9, 0xF4, 0xFA, 0x7F, 0xFF, 0xF8, 0xE1, 0xF8, 0xFD,
0xBF, 0xFF, 0xA7, 0xFE, 0x1F, 0xF8, 0x69, 0xE9, 0xF4, 0xFA, 0x7F, 0xFF, 0xF8, 0xF5, 0xF0, 0xFD,
0xBF, 0xFF, 0xA7, 0xFE, 0x4F, 0xF4, 0xE9, 0xE9, 0xF4, 0xFA, 0x7F, 0xF1, 0xF9, 0xF1, 0xF1, 0xFD,
0xBF, 0xFF, 0xA7, 0xFF, 0x27, 0x94, 0xE9, 0xE9, 0xF4, 0xFA, 0x7F, 0xF5, 0xF1, 0xF8, 0xF1, 0xFD,
0xBF, 0xFF, 0x43, 0xFF, 0x90, 0x30, 0xE1, 0xE0, 0xF4, 0xF8, 0x7F, 0xF0, 0xE3, 0xFC, 0x63, 0xFD,
0xBF, 0xFC, 0x00, 0xFF, 0xC0, 0xF8, 0x10, 0x40, 0x40, 0x20, 0x1F, 0xFC, 0x0F, 0xFE, 0x0F, 0xBD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7D,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7D,
0xBF, 0xF8, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD,
0xBF, 0xF2, 0xFF, 0xC0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xFD,
0xBF, 0xE4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFD,
0xBF, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0xFF, 0xF1, 0xFD,
0xBF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x03, 0xFD,
0xBF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xBF, 0xFE, 0x3A, 0xFA, 0x0D, 0x7E, 0x76, 0x63, 0x7C, 0xC4, 0x44, 0x54, 0x4F, 0xFF, 0xFD,
0xBF, 0xBF, 0xFD, 0x95, 0x76, 0x7A, 0xBE, 0xAA, 0xB6, 0xBD, 0x5D, 0xDE, 0xD5, 0xD7, 0xFF, 0xFD,
0xBF, 0xFF, 0xFD, 0x95, 0x76, 0x1A, 0xBE, 0x62, 0xB6, 0xBC, 0xCD, 0xCE, 0xD4, 0xCF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFC, 0x15, 0x6E, 0x7A, 0xBE, 0xAA, 0xB6, 0xBD, 0x5D, 0xDE, 0xD5, 0xD7, 0xFF, 0xFD,
0xBF, 0xFF, 0xFD, 0x95, 0x6E, 0x7A, 0xBE, 0xAA, 0xB6, 0xBD, 0x5D, 0xDE, 0xC5, 0xD7, 0xFF, 0xFD,
0xBF, 0xFF, 0xFD, 0x95, 0x5E, 0x7A, 0xBE, 0xAA, 0x63, 0x7D, 0x44, 0x44, 0x6C, 0x57, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3D ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Input/Ouptut pins (404 mode)

#define mode        D4  // AM/FM mode selection switch

#define volIn       A2  // Volume control
#define freqIn      A3  // Frequency control

 // Variables
 bool FM = true, AM = false;             // FM/AM modes, in FM by default
 bool modeCur = false, modePrev = false; // Mode change detection
 float freq = 88.1, freqold = 88.1, fstep = 0.2, fsave = 540;      // Frequency variables
 float vol = 50, volold = 50, volstep = 1;            // Volume variables
 float temp = 0;                         // Temporary variable
 bool firstloop = true;                  // First loop flag. Goes false after one loop
 int addr = 0;                           // Address to write to EEPROM

// Test Variables
 char readin;
 bool myconf = false;
 bool mymode = false; // Manually set mode. false = FM, true = AM
 int myfreq = 1;      // Frequency rotary encoder. 0 = down, 1 = same, 2 = up
 int myvol = 1;       // Volume rotary encoder. 0 = down, 1 = same, 2 = up
 // Manually set an RBDS bitstream, simulating a demodulated block that would be passed to MCU serially from the receivers
 bool myRBDS[104] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void setup() {
  Serial.begin(9600);
  
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  // Clear the buffer
  display.clearDisplay();

  // Display the custom team logo for 5 seconds
  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    TeamLogo, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(5000);
}

void loop() {
  // Clear display
  display.clearDisplay();

  // Get user inputs (403 mode)
  if (Serial.available() > 2) { // When inputs are queued...
    Serial.println(F("Inputs registered. Changing mode, freq, and vol..."));
    // Read 1 char for mode. 'f' for FM, 'a' for AM
    readin = Serial.read();
    /* if (readin != ('f' || 'a')) {
      readin = 'f';
    } */
    Serial.print("Read mode value = ");
    Serial.println(readin);
    // mymode = readin;
    if (readin == 'f') {
      mymode = false; // Save char to bool result. Makes comparisons easier later on
    }
    else {
      mymode = true;
    }
    // Read single char for frequency change. 's' for same, 'd' for down, 'u' for up
    readin = Serial.read();
    /* if (readin != ('s' || 'd' || 'u')) {
      readin = 's';
    } */
    Serial.print("Read freq value = ");
    Serial.println(readin);
    // myfreq = readin;
    if (readin == 's') {
      myfreq = 1; // Save char to int result
    }
    else if (readin == 'd') {
      myfreq = 0;
    }
    else {
      myfreq = 2;
    }
    // Read single char for volume change. 's' for same, 'd' for down, 'u' for up
    readin = Serial.read();
    /* if (readin != ('s' || 'd' || 'u')) {
      readin = 's';
    } */
    Serial.print("Read vol value = ");
    Serial.println(readin);
    // myvol = readin;
    if (readin == 's') {
      myvol = 1; // Save char to int result
    }
    else if (readin == 'd') {
      myvol = 0;
    }
    else {
      myvol = 2;
    }
    // Print saved bool and ints. These are what will be used for the rest of the loop
    Serial.print("Current mode = ");
    Serial.println(mymode);
    Serial.print("Current frequency change = ");
    Serial.println(myfreq);
    Serial.print("Current volume change = ");
    Serial.println(myvol);
    while (Serial.available() > 0) { // Clear input terminal of any extra user inputs, such as null or newline chars
      readin = Serial.read();        // These chars are still read as inputs and throw off the UI if not cleared out
    }
  }

  // Get user inputs (404 mode)
  // mymode = digitalRead(D4);
  // myfreq = analogRead(A3) / 204.8; // Analog pins are +0V to +5V, 1024 possible values
  // myvol  = analogRead(A2) / 204.8; // To convert int reading to 0-5V float, divide by 1024/5 = 204.8

  // Update mode
  if (mymode == false) {
    FM = true; // FM mode
    AM = false;
    modeCur = false; // FM mode
    fstep = 0.2; // Increase/decrease in steps of 0.2 MHz in FM mode
  } 
  else {
    FM = false;
    AM = true; // AM mode
    modeCur = true; // AM mode
    fstep = 10; // Increase/decrease in steps of 10 kHz in AM mode
  }
  if (modeCur != modePrev) {
    temp = freq;  // Swap saved frequency and current frequency (switch mode)
    freq = fsave; // freq will always have a frequency in the opposite mode of fsave
    fsave = temp;
    
    modePrev = modeCur;
  }

  // Display mode
  display.setTextSize(1); // Draw 1X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  if (modeCur == false) {
    display.println("FM Mode");
  }
  else {
    display.println("AM Mode");
  }

  // Update frequency
  if (myfreq == 1) { // Keep same value
    freq = freq; // freq is current frequency
  }
  else if (myfreq == 0) { // Decrease
    freq = freq - fstep; // fstep is value to increase/decrease freq by
  }
  else { // Increase
    freq = freq + fstep;
  }

  // Limit frequency to allowed ranges
  if (modeCur == 0) { // FM
    if (freq > 108.0) {
      freq = 107.9; // Upper limit
    }
    else if (freq <= 88.0) {
      freq = 88.1; // Lower limit
    }
  }
  else { // AM
    if (freq >= 1700.0) {
      freq = 1700.0; // Upper limit
    }
    else if (freq < 540.0) {
      freq = 540.0; // Lower limit
    }
  }

  // Display frequency
  display.setTextSize(2); // Draw 2X-scale text
  display.setCursor(0, 12);
  display.print(freq, 1);
  if (modeCur == 0) {
    display.println(F(" MHz")); // Print MHz for FM
  }
  else {
    display.println(F(" kHz")); // Print kHz for AM
  }

  // Update volume
  if (myvol == 1) { // Keep same value
    vol = vol; // vol is current volume
  }
  else if (myvol == 0) { // Decrease
    vol = vol - volstep; // volstep is value to increase/decrease vol by
  }
  else { // Increase
    vol = vol + volstep;
  }

  // Limit volume
  if (vol > 100) {
    vol = 100;
  }
  else if (vol < 0) {
    vol = 0;
  }

  // Display volume
  display.setTextSize(1); // Draw 1X-scale text
  display.setCursor(0, 30);
  display.print(F("Vol: "));
  display.print(vol, 0);
  display.println(F("%"));

  // Update RBDS (FM only)
  if (modeCur == false) {
    
  }

  // Display RBDS (FM only)
  if (modeCur == false) {
    display.setCursor(0, 42);
    display.println(F("No channel info."));
  }

  // Update display
  display.display();      // Show initial text
  delay(5000);            // Optional delay between each update

  // Save values to EEPROM, currently unused
  /* EEPROM.write(0, modeCur);
  EEPROM.write(50, freq); 
  EEPROM.write(100, vol); */

  firstloop = false; // Stays false after loop runs once. Currently unused
}
